Create a comprehensive Rust Entity Relationship Graph Visualizer called "MSG_NET" with the following complete feature set:

## CORE APPLICATION STRUCTURE

### 1. Rust Project Setup
- Create a Cargo.toml with dependencies: clap, tokio, reqwest, serde, serde_json, uuid, regex, vis.js integration
- Modular architecture with: main.rs, lib.rs, config.rs, error.rs, text_processor.rs, entity_extractor.rs, graph_builder.rs, web_interface.rs, export.rs

### 2. CLI Interface (main.rs)
Create a comprehensive CLI with these commands:

**Generate Command:**
- `generate -i <input> -o <output>` with options:
- `--source-type` (document, chat, email, article)
- `--format` (html, json, csv, graphml, dot)
- `--config` (JSON configuration file)
- `--include-metadata`
- `--use-llm` (enable LLM integration)
- `--deep-analysis` (comprehensive LLM extraction)
- `--llm-model` (default: llama3.2)
- `--llm-endpoint` (default: http://localhost:11434/api/generate)

**Additional Commands:**
- `analyze -i <input> --verbose` (text analysis without output)
- `config -o <output>` (generate sample configuration)
- `example --generate-text` or `--generate-ai-story --word-count <NUM>` 
- `big-help` (comprehensive usage examples)

### 3. AI Story Generation Feature
Implement AI-powered story generation using Ollama:
- Custom word count specification (default: 200)
- Entity-rich narrative generation optimized for graph analysis
- Support for multiple LLM models (llama3.2, mistral, etc.)
- Async HTTP calls to Ollama API with proper error handling
- JSON request/response handling with OllamaRequest/OllamaResponse structs

## CORE PROCESSING MODULES

### 4. Entity Extraction System (entity_extractor.rs)
Build dual-mode extraction system:

**Pattern-Based Extraction:**
- Regex patterns for entities (Person, Place, Organization, Other)
- Relationship detection between entities
- Concept identification and mapping
- Confidence scoring for all extractions

**LLM-Enhanced Extraction:**
- Async Ollama API integration
- JSON-structured prompts for entity/relationship/concept extraction
- Graceful fallback to pattern-based extraction on LLM failures
- Deep analysis mode with multi-phase extraction:
  - Initial entity/relationship/concept extraction
  - Deep relationship analysis for implicit connections
  - Contextual entity enhancement
  - Advanced concept-entity relationship mapping

### 5. Graph Building & Layout (graph_builder.rs)
- Convert extraction results to vis.js compatible graph structure
- Multiple layout algorithms: hierarchical, force-directed, circular
- Node/edge styling based on entity types
- Physics simulation integration
- Metadata preservation throughout pipeline

### 6. Professional Web Interface (web_interface.rs)
Create a sophisticated HTML template with:

**Left Side Panel (Collapsible):**
- Layout Controls (Hierarchical, Force-Directed, Circular)
- View Controls (Zoom In/Out, Fit to View, Center)
- Physics Controls (Toggle Physics, Stabilize)
- Label Controls (Node/Edge Label visibility)
- Filter Controls (By node type)
- Export Controls (JSON, PNG)
- Toggle button (☰) with smooth animations

**Top-Right Information Panel:**
- Node/Edge details display when items are selected
- Toggle button (ℹ️) for show/hide functionality
- Smooth slide-out animation when collapsed
- Smart positioning that doesn't interfere with graph

**Interactive Features:**
- vis.js integration with full interactivity
- Node selection with detailed information display
- Drag and drop repositioning
- Zoom/pan with mouse and touch support
- Responsive design for different screen sizes

## ADVANCED FEATURES

### 7. Multi-Format Export System (export.rs)
Support multiple output formats:
- **HTML**: Interactive vis.js graphs with full UI
- **JSON**: Structured graph data with metadata
- **CSV**: Tabular format for spreadsheet analysis
- **GraphML**: XML format for Gephi/Cytoscape
- **DOT**: Graphviz format for academic use
- Automatic file organization in "0_networks/" directory
- File versioning (file.html -> file_01.html if exists)

### 8. Configuration System (config.rs)
JSON-based configuration with:
- Node colors/shapes for different entity types
- Layout algorithm preferences
- Physics simulation parameters
- Extraction patterns (regex for entities/relationships/concepts)
- LLM integration settings
- Export preferences

### 9. Comprehensive Help System
Implement extensive help documentation:
- Standard `--help` for each command
- `big-help` command with:
  - Quick start examples for beginners
  - Advanced LLM integration workflows
  - AI story generation examples
  - Configuration customization guides
  - Batch processing examples
  - Deep analysis comparisons
  - Troubleshooting tips
  - Recommended workflows for different user types

## TECHNICAL REQUIREMENTS

### 10. Error Handling & Robustness
- Custom error types for different failure modes
- Graceful degradation when LLM services unavailable
- Input validation and sanitization
- Comprehensive error messages with actionable advice
- Async operation handling with proper timeouts

### 11. Performance & Scalability
- Efficient text processing for large documents
- Streaming-capable architecture
- Memory-conscious graph building
- Optimized vis.js rendering for complex graphs
- Progress indicators for long-running operations

### 12. LLM Integration Architecture
- Async HTTP client for Ollama API calls
- Structured JSON prompts for consistent LLM responses
- Response parsing with error recovery
- Support for multiple LLM models and endpoints
- Fallback strategies when LLM processing fails

## OUTPUT SPECIFICATIONS

### 13. Professional HTML Output
Generate production-ready HTML files with:
- Complete vis.js integration
- Professional CSS styling with smooth animations
- Collapsible UI panels with state management
- Responsive design for desktop/mobile
- Comprehensive JavaScript for all interactive features
- Toggle buttons with visual feedback
- Information panel positioned in top-right corner

### 14. Data Export Quality
Ensure all export formats include:
- Complete graph topology (nodes, edges, metadata)
- Confidence scores and extraction methods
- Configurable styling and layout information
- Timestamps and processing information
- Compatible formatting for target applications

## WORKFLOW INTEGRATION

### 15. Complete User Workflows
Support these end-to-end workflows:

**Basic Usage:**
1. Generate example text or AI story
2. Create interactive graph with pattern-based extraction
3. View and interact with results in browser

**Advanced LLM Workflow:**
1. Generate AI story with specified word count
2. Analyze with deep LLM extraction
3. Export in multiple formats
4. Compare standard vs LLM-enhanced results

**Customization Workflow:**
1. Generate sample configuration
2. Customize colors, patterns, and behavior
3. Apply to text processing
4. Generate professional visualizations

Build this as a complete, production-ready Rust application with comprehensive documentation, robust error handling, and professional UI/UX design. Include extensive testing capabilities and clear code organization for maintainability.

